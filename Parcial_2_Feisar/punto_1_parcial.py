# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19zwI5jZeqASzxfur0bzEvlyhvM1KeRcW
"""

import numpy as np

A = np.array([[1,0,-1],
              [2,0,2],
              [8,2,-3]], dtype=float)






def gaussjordan(A):
      tamano = np.shape(A)
      n = tamano[0]
      identidad = np.identity(n)


      AB = np.concatenate((A,identidad),axis=1)
      AB0 = np.copy(AB)


      tamano = np.shape(AB)
      n = tamano[0]
      m = tamano[1]

      for i in range(0,n-1,1):
          columna = abs(AB[i:,i])
          dondemax = np.argmax(columna)

          if (dondemax !=0):
          
              temporal = np.copy(AB[i,:])
              AB[i,:] = AB[dondemax+i,:]
              AB[dondemax+i,:] = temporal
      AB1 = np.copy(AB)


      for i in range(0,n-1,1):
          pivote = AB[i,i]
          adelante = i+1
          for k in range(adelante,n,1):
              factor = AB[k,i]/pivote
              AB[k,:] = AB[k,:] - AB[i,:]*factor
      AB2 = np.copy(AB)


      ultfila = n-1
      ultcolumna = m-1
      for i in range(ultfila,0-1,-1):
          pivote = AB[i,i]
          atras = i-1 
          for k in range(atras,0-1,-1):
              factor = AB[k,i]/pivote
              AB[k,:] = AB[k,:] - AB[i,:]*factor
        
          AB[i,:] = AB[i,:]/AB[i,i]

      inversa = np.copy(AB[:,n:])
      return inversa



# SALIDA
print(gaussjordan(A))